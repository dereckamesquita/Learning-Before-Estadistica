---
title: "Capitulo 2 Introducción a la Estadistica Descriptiva"
author: "Dereck Amesquita"
date: "6/4/2021"
output:
  html_document: default
  pdf_document: default
---

## ¿Que es la estadistica descriptiva?
Es la rama de la estadistica que nos permite resumir un gran conjunto de datos.
"Deducir" un elemento segun un gran conjunto de elementos similares.
Con summary podremos obtener los principales datos descritivos de un dataframe

# Datos Cualitativos

```{r}
prueba=iris
summary(prueba)
```
## Frecuencias
### Frecuencia absoluta
Es el numero de datos que hay.

### Frecuencia relativa
Es el porcentaje de datos que hay
### Codigo en R
Con sample obtener 12 elementos del 40 al 55 donde los elementos se pueden repetir.
En Y estamos generando 12 elementos si y no, los cuales estan meditos en un vector y se terminaran convirtiendo en un factor, debido a eso nos arroja que hay dos niveles. 
La funcion table nos ayuda a contar los elementos que existen.
```{r Frecuencias}
x = sample(40:55, size = 12, replace=TRUE)
y = factor(sample(c("si", "no"), size=12, replace = TRUE))
x
y

```
Tambien podemos usar la funcion names que nos dara los niveles.
```{r Tabla de contigencia}
table(x)
table(y)
names(table(x))
```
Table tiene una desventaje puesto que solo aparecen los valores mayores a cero. Si nuestro datos tienen un nivel el cual no tiene ningun elemento, no se nos sera mostrado. Por lo cual podemos convertirlos a factores.
Creamos nx que recogera a x como factores con niveles del 40:55
```{r tabla de frecuencia absoluta}
nx=factor(x, levels=40:55)
table(nx)
```   
Si quisieramos encontrar un valor dentro de la tabla podemos indicarle la posicion o podemos hacer que busque.
Solo bastara con usar: 

```{r}
 table(nx)["54"]
```
Para conocer la frecuencia relativa deberemos usar prop.table. Nos da el porcenteja
```{r tabla de frecuencia relativa}
prop.table(table(nx))
prop.table(table(y))
#Si queremos obtener el porcentaje, debemos multiplicar por 100
prop.table(table(y))*100
#Tambien podemos obtener la frecuencia relativa con la division
table(y)/length(y)
```

```{r}
table(x)==2 
```
## Frecuencias Bidimensionales

Construiremos un nuevo conjunto de datos.
LO que haremos sera cruzar la informacion de Y. Con table haremos que cada "se" pueda vincularse con el valor en el orden correspondiente a "y"
```{r}
se=sample(c("H","M"), replace = TRUE, size=length(y))
table(se,y)

```


Podemos decir que 4 hombres dijeron que no, 4 mujeres dijeron que no.

### Frecuencia relativa global
Se divide cada elemento entre el total. Ejemplo 4/12 para el elemento (1,1) o 1/1
para el elemento (2,2)
 
```{r FR global}
prop.table(table(se,y))
```
El 33% del total son hombres que dijeron que no. el 25% son hombres que dijeron que si.

### Frecuencia relativa marginal

Con margin=1 obtenemos la FRM de las filas y con =2 obtenemo la FRM de las columnas
```{r FRM filas}
prop.table(table(se,y), margin=1)
```
Analizaremos por filas, es decir del total de hombres el 0.66 respondio no,
y el 0.33 respondio que si. 

```{r FRM columnas}
prop.table(table(se,y), margin=2)
```
Analizaremos por columnas, es decir de los que dijeron si, el 75% fueron hombres
y el 25% mujeres.


##Crostable

Pertenece al paquete gmodels. Crosstable nos permitira generar de forma automatica las distintas frecuencias.
```{r}
library(gmodels)
CrossTable(se,y,prop.chisq = FALSE)
fix(se)
y
rev(y)
```

## Datos multidimensionales

```{r}
#creamos los vectores
per= sample(c("S","N"), size=100, replace = TRUE)
sex= sample(c("H","M"), size=100, replace = TRUE)
lug= sample(c("Peru","Chile","Argentina","Uruguay","Brasil"), size=100, replace = TRUE)
#tablas
table(sex,per,lug)
ftable(sex,per,lug)
ftable(sex,per,lug, col.vars=c("sex","per"))

```

### Filtrado de tablas

```{r}
table(sex, per, lug)["M","S","Peru"]
#Esto nos da todas las mujeres que dijeron que si y son de Peru

table(sex, per, lug)["M",,"Peru"]
#Esto nos da todas las mujeres que son de Peru.

table(sex, per, lug)[,,"Peru"]
#Esto nos da todos lo de Peru

```

# Ejemplo 1
La siguiente base de datos ya funciona como una tabla de frecuencias, se denominan
datos agregados.
Es como si se hubiera utilizado un table(Eye,Hair,Sex)

```{r}
HairEyeColor
dfx=HairEyeColor
sum(dfx)->total

```
El total de individuos son `r total`.


```{r}
prop.table(dfx, margin=3)
```
El 11.46% de todos los hombres tiene pelo negro y ojos cafes
El 18.99% de todos los hombres tiene pelo cafe y ojos cafes.

```{r}
prop.table(dfx, margin=c(1,2))

```
De quieness tienen el cabello negro y los ojos cafes el 47.25% son hombres y el 
52.94% son mujeres.
De quienes tienen cabello cafe y ojos hazel el 46.29% son hombres y el 53.70%
son mujeres.

## Cambiar orden

```{r}
#modificar el orden de datos agregados
dfxn=aperm(dfx, perm=c("Sex", "Hair","Eye"))
#Mostrar tabla de datos agregados
library("kableExtra")

kable(dfxn)


```


# Ejemplo 2

## Arreglos importantes en R

```{r}
data="https://raw.githubusercontent.com/dereckamesquita/Estadistica-DS/main/datasets/EnergyDrink.csv"
energy=read.csv(data, sep=";",header = TRUE)
#volver una sola columna en factor
energy$estudio=as.factor(energy$estudio)
#Volver toda un data frame en factor
energy[]=lapply(energy,factor)
#Devolver a numero
energy$X=as.numeric(energy$X)
str(energy)
head(energy)
summary(energy)
colnames(energy)[colnames(energy)=="X"] = "indice"
#eliminar la columna indice
energy=energy[,2:4]
summary(energy)
```
Margin igual 2 especifica que se trabaje con las columnas. Con apply aplicaremos
la funcion a todas las columnas

```{r}
apply(energy, MARGIN = 2, FUN = table)
#Si solo queremos una columna
apply(energy, MARGIN = 2, FUN = table)$sexo
#El anterior es igual a 
table(energy$sexo)


```

```{r}
table(energy)
```


# Datos Ordinales
Son datos que presentan un orden natural. Por ejemplo las escalas.









