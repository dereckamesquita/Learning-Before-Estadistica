ylab = "Frec. relativas acumuladas")
axis(1, at = L)
text(h$mids, h$density/2, labels = round(h$density ,2), col = "blue")
dens.x = density(x)
dens.x$y = cumsum(dens.x$y)*(dens.x$x[2]-dens.x$x[1])
lines(dens.x,col = "purple",lwd = 2)
}
histRel(petalos,5)
histRelCum(petalos,5)
set.seed(1)
edades = c(sample(0:99,80,replace = TRUE),rep(35,10),rep(22,5),rep(17,3),50,50)
extremos = c(0,20,40,60,80,100)
par(mfrow=c(1, 2))
histRel(edades, extremos)
rug(edades)
histRel(edades, extremos)
rug(jitter(edades))
par(mfrow=c(1,1))
set.seed(NULL)
set.seed(1)
edades = c(sample(0:99,80,replace = TRUE),rep(35,10),rep(22,5),rep(17,3),50,50)
extremos = c(0,20,40,60,80,100)
par(mfrow=c(1, 2))
histRel(edades, extremos)
rug(edades)
rug(jitter(edades))
par(mfrow=c(1,1))
set.seed(NULL)
set.seed(1)
edades = c(sample(0:99,80,replace = TRUE),rep(35,10),rep(22,5),rep(17,3),50,50)
extremos = c(0,20,40,60,80,100)
par(mfrow=c(1, 2))
histRelCum(edades, extremos)
rug(edades)
histRelCum(edades, extremos)
rug(jitter(edades))
par(mfrow=c(1,1))
set.seed(NULL)
data="https://raw.githubusercontent.com/dereckamesquita/Learning-Before-Estadistica/main/datasets/bodyfat.txt"
datos=read.table(data, header = TRUE)
str(datos
)
cor(datos)
pairs(datos)
pairs(datos[,1:5])
datosn=datos[,c(2,4)]
names(datosn)=c("Grasa","Peso")
str(datosn)
# Regresion
lm(y~x) #Esto se lee como formula es decir: Y de X o y=ƒ(X)
# Regresion
#lm(y~x) #Esto se lee como formula es decir: Y de X o y=ƒ(X)
#Alt+159 = ƒ
lm(y~x, data=datosn)
# Regresion
#lm(y~x) #Esto se lee como formula es decir: Y de X o y=ƒ(X)
#Alt+159 = ƒ
lm(Grasa~Peso, data=datosn)
# Regresion
#lm(y~x) #Esto se lee como formula es decir: Y de X o y=ƒ(X)
#Alt+159 = ƒ
lm(Pes~Grasa, data=datosn)
# Regresion
#lm(y~x) #Esto se lee como formula es decir: Y de X o y=ƒ(X)
#Alt+159 = ƒ
lm(Pes~Grasa, data=datosn)
# Regresion
#lm(y~x) #Esto se lee como formula es decir: Y de X o y=ƒ(X)
#Alt+159 = ƒ
lm(Peso~Grasa, data=datosn)
lm(datosn$Peso~datosn$Grasa)
# Regresion
#lm(y~x) #Esto se lee como formula es decir: Y de X o y=ƒ(X)
#Alt+159 = ƒ
regre1=lm(Peso~Grasa, data=datosn)
plot(datosn)
abline(regre1, col="blue")
plot(datosn)
abline(regre1, col="blue")
plot(datosn)
abline(regre1, col="blue")
summary(regre1)
View(regre1)
View(regre1)
summary(regre1)$r.squared
dep=c(1.1,3.6,12,36)
ind=c(20,35,61,82)
#Graficos
plot(ind,dep)
plot(ind,dep, log="y")
plot(ind,dep)
plot(ind,dep, log="y")
plot(ind,dep, log="y", main = "Escala Logaritmica")
dep=c(1.1,3.6,12,36)
ind=c(20,35,61,82)
#Graficos
par(mfrow = c(1, 2))
plot(ind,dep, main = "Escala lineal")
plot(ind,dep, log="y", main = "Escala Logaritmica")
lm(log10(dep)~ind)
regrelog-nivel=lm(log10(dep)~ind)
regrelog-nivel=lm(log10(dep)~ind)
regrelognivel=lm(log10(dep)~ind)
summary(regrelognivel)
#Grafico
plot(ind,dep,main="Curva de regresion")
curve(.054^x*0.468, add=TRUE, col="lightblue")
#Grafico
plot(ind,dep,main="Curva de regresion")
curve(.054^x*0.468, add=TRUE, col="lightblue")
dep=c(1.2,3.6,12,36)
ind=c(20,35,61,82)
#Graficos
par(mfrow = c(1, 2))#Juntar dos plots
plot(ind,dep, main = "Escala lineal")
plot(ind,dep, log="y", main = "Escala Logaritmica")
regrelognivel=lm(log10(dep)~ind)
summary(regrelognivel)
#Grafico
plot(ind,dep,main="Curva de regresion")
curve(.054^x*0.468, add=TRUE, col="lightblue")
plot(ind,dep,main="Curva de regresion")
curve(1.054^x*0.468, add=TRUE, col="lightblue")
tiempo = 1:10
gramos = c(0.097,0.709,2.698,6.928,15.242,29.944,52.902,83.903,120.612,161.711)
d.f = data.frame(tiempo,gramos)
tiempo = 1:10
gramos = c(0.097,0.709,2.698,6.928,15.242,29.944,52.902,83.903,120.612,161.711)
d.f = data.frame(tiempo,gramos)
# Graficas
par(mfrow= c(1,3))
plot(d.f)
plot(d.f, log="y")
plot(d.f, log="xy")
par(mfrow= c(1,1))
library("fPortfolio")
library("lpSolve")
Data = SMALLCAP.RET
head(Data)
#De esta forma estamos solicitando todas las filas
Data = Data[,c("BKE", "FCEL", "GG", "OII", "SEB")]
str(Data)
matcovData = covEstimator(Data)
matcovData
# Especificación de restriccion de media varianza
especificacion_corta = portfolioSpec()
setSolver(especificacion_corta) = "solveRshortExact"
# Frontera eficiente
# Restricción (constraints="Short"):
# Esto quiere decir que podemos vender los activos, esto se refleja en el signo negativo
# de Portfolio Weights:
shortFrontier = portfolioFrontier(Data,spec=especificacion_corta,constraints="Short")
# Por default reporta los portafolio: 1,13,25,37,50
shortFrontier
frontera = shortFrontier
frontierPlot(frontera,frontier = "both",risk="Sigma",type="l",col = c("blue", "grey"))
# Frontera eficiente
frontierPlot(frontera,frontier = "both",risk="Sigma",type="l",col = c("blue", "grey"))
# Portafolio de mínima varianza
minvariancePoints(frontera,pch=19,col="red")
# Otros portafolios
singleAssetPoints(frontera,risk="Sigma",pch=19,cex=1.5,col=topo.colors(6))
# Frontera eficiente
frontierPlot(frontera,frontier = "both",risk="Sigma",type="l",col = c("blue", "grey"), main="Frontera")
frontierPlot(frontera,frontier = "both",risk="Sigma",type="l",col = c("blue", "grey"), main="Frontera")
shortFrontier
frontera = shortFrontier
frontierPlot(frontera,frontier = "both",risk="Sigma",type="l",col = c("blue", "grey"))
# Frontera eficiente
frontierPlot(frontera,frontier = "both",risk="Sigma",type="l",col = c("blue", "grey"), main="Frontera")
# Portafolio de mínima varianza
minvariancePoints(frontera,pch=19,col="red")
# Otros portafolios
singleAssetPoints(frontera,risk="Sigma",pch=19,cex=1.5,col=topo.colors(6))
franz=c(2,4,5,6,7,9,10,11)
quantile(franz,0.65)
franz=c(2,4,5,6,7,9,10,11)
quantile(franz,0.65)
install.packages("Rlab")
library(Rlab)
dbern(0,0.7)
dbern(1,0.7)
100/8
2.5*5
2.5*8
15*8
knitr::opts_chunk$set(echo = TRUE, comment = NA)
myfunc <- function(x, y = 2){
x = x + 10
y = y + 100
return(y)
}
myfunc(3)
x<-1
x==1
x==2
grep("milk.+", c("cow's milk", "milkshake", "milky", "cat", "milk1", "milk"), value = T)
?grep
2.1 in c(1.5, 3.14)
library(Rlab)
dbern(0,0.7) #dbern trabaja la distribucion de Bernoulli
dbern(1,0.7)
pbern(0,0.7)
pbern(1,0.7)
pbern(0,0.7)
pbern(1,0.7)
pbern(0,0.7)
pbern(1,0.7)
rbern(100,0.7)->data
rbern(100,0.7)->data
hist(data)
plot(0:50,dbinom(0:50,50,0.5),col = "purple", xlab = "", ylab = "", main = "Función de probabilidad de una B(50,0.5)")
plot(0:50, pbinom(0:50,50,0.5),col = "purple", xlab = "", ylab = "", main = "Función de distribución de una B(50,0.5)", ylim = c(0,1))
dbinom(x, n, p)
n<-30
p<-0.6
x<-0:30
dbinom(x, n, p)
plot(dbinom(x, n, p))
ejemplobinomial<-dbinom(x, n, p)
plot(ejemplobinomial)
media_ejemplobinomial<-n*p
var_ejemplobinomial<-n*p*(1-p)
media_ejemplobinomial
var_ejemplobinomial
n<-30
p<-0.6
x<-0:30
ejemplobinomial<-dbinom(x, n, p)
plot(ejemplobinomial)
media_ejemplobinomial<-n*p
var_ejemplobinomial<-n*p*(1-p)
media_ejemplobinomial
var_ejemplobinomial
max(ejemplobinomial)
#Funcion de distribucion
ejemplobinomial_acu<-pbinom(x, n, p)
plot(ejemplobinomial_acu)
qbinom(0.5,n,p)
hist(rbinom(100,n,p))
?rbinom
distr_poisson <- dpois(x,l)
l=5
x<-0:30
distr_poisson <- dpois(x,l)
distr_poisson
plot(distr_poisson)
hist(distr_poisson)
l=5
x<-0:30
distr_poisson <- dpois(x,l)
distr_poisson
plot(distr_poisson)
hist(distr_poisson)
par(mfrow=c(1,2))
plot(c(0,1,1:4,4,5), c(0,0,dunif(1:4,min = 1, max = 4),0,0),col = "purple", xlab = "", ylab = "", main = "Función de densidad de una U(1,4)", type = "o", ylim = c(0,1))
plot(0:5, punif(0:5,min = 1, max = 4),col = "purple", xlab = "", ylab = "", main = "Función de distribución de una U(1,4)", type = "o")
par(mfrow=c(1,1))
plot(c(0,1,1:4,4,5), c(0,0,dunif(1:4,min = 1, max = 4),0,0),col = "purple", xlab = "", ylab = "", main = "Función de densidad de una U(1,4)", type = "o", ylim = c(0,1))
plot(0:5, punif(0:5,min = 1, max = 4),col = "purple", xlab = "", ylab = "", main = "Función de distribución de una U(1,4)", type = "o")
dunif(q,a,b)
a=0
b=1
q=0.5
dunif(q,a,b)
dunif(x,a,b)
punif(x,a,b)
x<-seq(-0.1,1.1,0.1)
dunif(x,a,b)
punif(x,a,b)
unlink('Cap 2/Teoria4_cache', recursive = TRUE)
dens_uni<-dunif(x,a,b)
plot(dens_uni)
plot(distr_uni)
distr_uni<-punif(x,a,b)
plot(dens_uni)
plot(distr_uni)
runif(100,a,b)->ale_uni
hist(ale_uni)
runif(1000,a,b)->ale_uni
hist(ale_uni)
unlink('Cap 2/Teoria4_cache', recursive = TRUE)
x=-20:20
x=-20:20
y=x^(-0.15)
plot(x,y)
x=-20:20
y=x^(-2)
plot(x,y)
y=x^(-3)
plot(x,y)
y=x^(-0.5)
plot(x,y)
y
x=seq(0,50,0.1)
y=x^(-0.5)
plot(x,y)
plot(x,y,type="l")
x=seq(-20,50,0.5)
y=x^(-0.5)
plot(x,y,type="l")
y=x^(0.5)
plot(x,y,type="l")
x=seq(-20,50,0.5)
y=x^(-0.5)
plot(x,y,type="l")
y=(0.5)^x
plot(x,y,type="l")
y=(0.5)^-x
plot(x,y,type="l")
y=(-0.5)^x
plot(x,y,type="l")
x=seq(0,50,0.5)
y=(-0.5)^x
plot(x,y,type="l")
y
x=seq(0,6,0.5)
y=(-0.5)^x
y
y=(-3)^x
y
plot(x,y,type="l")
y
x=seq(0,6,0.5)
x
y=(-2)^x
y
plot(x,y,type="l")
plot(x,y,type="p")
x=seq(0,50,0.5)
x
x
y=(-2)^x
y
plot(x,y,type="p")
x=seq(0,500,1)
plot(x,y,type="p")
x=seq(0,500,1)
y=(-2)^x
plot(x,y,type="p")
x=seq(0,200,1)
x
x=seq(0,200,1)
y=(-2)^x
plot(x,y,type="p")
x=seq(0,200,1)
y=(-1.5)^x
plot(x,y,type="p")
x=seq(0,200,0.5)
y=(-1.5)^x
plot(x,y,type="p")
x=seq(100,200,0.5)
y=(-1.5)^x
plot(x,y,type="p")
x=seq(180,200,0.5)
y=(-1.5)^x
plot(x,y,type="p")
x=seq(180,400,0.5)
y=(-1.5)^x
plot(x,y,type="p")
x=seq(180,220,0.5)
y=(-1.5)^x
plot(x,y,type="p")
x=seq(200,220,0.5)
y=(-1.5)^x
plot(x,y,type="p")
x=seq(200,400,2)
y=(-1.5)^x
plot(x,y,type="p")
x <- runif(100,1,3)
x
seed(2021)
x <- runif(100,1,3)
x
#
set.seed(2021)
x <- runif(100,1,3)
x
y <- x^2
2*mean(y)
set.seed(2021)
x <- runif(10000,min=1,max=3)
x
y <- x^2
2*mean(y)
# Simular Random Motion
delta <- 0.001
w <-  c()
w <-  numeric(100)
delta <- 0.001
w0 <- 0
w <-  numeric(100)
w[1]<- w0
x <- rnorm(100)
for (i in 2:100){
w[i] <- w[i-1]+sqrt(delta)*x[i-1]
}
plot(w, type="l")
delta <- 0.001
w0 <- 0
w <-  numeric(100)
w[1]<- w0
x <- rnorm(100)
for (i in 2:100){
w[i] <- w[i-1]+sqrt(delta)*x[i-1]
}
plot(w, type="l")
s0 <- 100
r<- 0.05
sigma <- 0.30
T <- 1
K <- 100
n <- 100
dt <- T/n
S <- numeric(n)
S[1] <-s0
z<- rnorm8(n)
for (i in 2:n){
S[i] <- S[i-1]* exp((r-0.5*sigma^2)*dt+sigma*sqrt(dt)*z[i-1])
}
plot(S, type="l")
s0 <- 100
r<- 0.05
sigma <- 0.30
T <- 1
K <- 100
n <- 100
dt <- T/n
S <- numeric(n)
S[1] <-s0
z<- rnorm(n)
for (i in 2:n){
S[i] <- S[i-1]* exp((r-0.5*sigma^2)*dt+sigma*sqrt(dt)*z[i-1])
}
plot(S, type="l")
s0 <- 100
r<- 0.05
sigma <- 0.30
T <- 1
K <- 100
n <- 100
dt <- T/n
S <- numeric(n)
S[1] <-s0
z<- rnorm(n)
for (i in 2:n){
S[i] <- S[i-1]* exp((r-0.5*sigma^2)*dt+sigma*sqrt(dt)*z[i-1])
}
plot(S, type="l")
x <- numeric(200)
y <- numeric(200)
e <- rnorm(200)
x[1] <- e [1]
y[1] <- 0.1+u[1]
for (t in 2:200){
x[t] <- 0.5*x[t-1]+e[t]
y[t] <- 0.1+ u[t]+0.7* u [t-1]
}
plot(x, type = "l")
lines(y, color="red")
n <- 100
x <- numeric(200)
y <- numeric(200)
e <- rnorm(200)
x[1] <- e [1]
y[1] <- 0.1+u[1]
for (t in 2:200){
x[t] <- 0.5*x[t-1]+e[t]
y[t] <- 0.1+ u[t]+0.7* u [t-1]
}
plot(x, type = "l")
lines(y, col="red")
# Times series simulation
x <- numeric(200)
y <- numeric(200)
e <- rnorm(200)
u <- rnorm(200)
x[1] <- e [1]
y[1] <- 0.1+u[1]
for (t in 2:200){
x[t] <- 0.5*x[t-1]+e[t]
y[t] <- 0.1+ u[t]+0.7* u [t-1]
}
plot(x, type = "l")
lines(y, col="red")
cor(x[2:200], x[1:199])
cor(x,x)
cor(x[3:200], x[1:198])
cor(x[3:200], x[1:197])
acf(x)
cor(x[4:200], x[1:197])
##Importar la data
ruta <-"/Enaho/data.csv"
data <- read_csv(ruta)
data <- read.csv("E:/Github/Learning-Before-Estadistica/Enaho/data.csv", header=FALSE)
View(data)
ruta <-"E:/Github/Learning-Before-Estadistica/Enaho/data.csv"
data <- read_csv(ruta, header=FALSE)
data <- read.csv("E:/Github/Learning-Before-Estadistica/Enaho/data.csv", header=FALSE)
View(data)
ruta <-"E:/Github/Learning-Before-Estadistica/Enaho/data.csv"
data <- read.csv(ruta, header=FALSE)
summary(data)
#Conocer que tipos de variables tenemos
str(data)
head(data)
ruta <-"E:/Github/Learning-Before-Estadistica/Enaho/data.csv"
data <- read.csv(ruta, header=FALSE)
View(data)
str(data)
head(data)
summary(data)
