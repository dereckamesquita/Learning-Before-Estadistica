table(notas)
notas = ordered(c("S","A", "N", "Ex", "S", "S", "Ex", "Ex", "N", "A", "A", "A",
"A", "N", "S"), levels = c("S", "A", "N", "Ex"))
table(notas)
web = c("cir","cir","winay")
table(web)
data.frame(web)
table(web)
web=data.frame(web)
table(web)
table(notas)
set.seed(2018)
set.seed(2018)
clientes = sample(1:5, 50, replace = TRUE)
set.seed(2018)
clientes = sample(1:5, 50, replace = TRUE)
clientes
clientes = sample(1:5, 50, replace = TRUE)
clientes = sample(1:5, 50, replace = TRUE)
set.seed(2018)
clientes = sample(1:5, 50, replace = TRUE)
clientes = sample(1:5, 50, replace = TRUE)
clientes
set.seed(NULL)
clientes = sample(1:5, 50, replace = TRUE)
clientes
table(clientes)
FreAcu=table(notas)
FreAcu
cumsum(FreAcu)
FAclientes=table(clientes)
prop.table(FAclientes)
#Para Abbsolutas
FreAAcu=table(notas)
#Para relativas
FreRAcu=prop.table(notas)
#Para Absolutas
FreAAcu=table(notas)
cumsum(FreAAcu)
#Para relativas
FreRAcu=prop.table(notas)
delete(FreAcu)
remove(FreAcu)
#Para Absolutas
frecuencia_absoluta=table(notas)
cumsum(frecuencia_absoluta)
#Para Absolutas
frecuencia_absoluta=table(notas)
notas = ordered(c("S","A", "N", "Ex", "S", "S", "Ex", "Ex", "N", "A", "A", "A",
"A", "N", "S"), levels = c("S", "A", "N", "Ex"))
table(notas)
#Para Absolutas
frecuencia_absoluta=table(notas)
cumsum(frecuencia_absoluta)#Obtenemos la acumulada
#Para relativas
FreRAcu=prop.table(frecuencia_absoluta)
#Para relativas
frecuencia_relativa=prop.table(frecuencia_absoluta)
cumsum(frecuencia_relativa)
barplot(frecuencia_absoluta, main="Diagrama de Frecuencia Absoluta")
barplot(frecuencia_absoluta, main="Diagrama de Frecuencia Absoluta")
#Esta es otra forma de colocar los niveles y el ordered, en el ejemplo de notas lo pusimos todo junto
longitud = sample(1:5,100, replace = TRUE)
longitud = ordered(longitud)
levels(longitud) = c("Muy.corto","Corto","Normal","Largo","Muy.largo")
#Calculamos sus frecuencias
fre_absoluta=table(longitud)
fre_relativa=prop.table(fre_absoluta)
fre_absoluta
fre_absoluta
fre_relativa
fre_absoluta
fre_relativa
fre_absoluta
fre_relativa
#Calcumos sus frecuencias acumuladas
fre_absol_acu=cumsum(fre_absoluta)
fre_relat_acu=cumsum(fre_relativa)
fre_relat_acu
=cumsum(fre_relativa)
re_absol_acu=cumsum(fre_absoluta)
fre_relat_acu=cumsum(fre_relativa)
fre_absol_acu
fre_relat_acu
#grafico
lista=c(fre_absol_acu,fre_relat_acu)
for (i in lista){
barplot(i)
}
#Esta es otra forma de colocar los niveles y el ordered, en el ejemplo de notas lo pusimos todo junto
longitud = sample(1:5,100, replace = TRUE)
longitud = ordered(longitud)
levels(longitud) = c("Muy.corto","Corto","Normal","Largo","Muy.largo")
#Calculamos sus frecuencias
fre_absoluta=table(longitud)
fre_relativa=prop.table(fre_absoluta)
fre_absoluta
fre_relativa
#Calcumos sus frecuencias acumuladas
fre_absol_acu=cumsum(fre_absoluta)
fre_relat_acu=cumsum(fre_relativa)
fre_absol_acu
fre_relat_acu
#grafico
lista=c(fre_absol_acu,fre_relat_acu)
for (i in lista){
barplot(i)
return()
}
#Esta es otra forma de colocar los niveles y el ordered, en el ejemplo de notas lo pusimos todo junto
longitud = sample(1:5,100, replace = TRUE)
longitud = ordered(longitud)
levels(longitud) = c("Muy.corto","Corto","Normal","Largo","Muy.largo")
#Calculamos sus frecuencias
fre_absoluta=table(longitud)
fre_relativa=prop.table(fre_absoluta)
fre_absoluta
fre_relativa
#Calcumos sus frecuencias acumuladas
fre_absol_acu=cumsum(fre_absoluta)
fre_relat_acu=cumsum(fre_relativa)
fre_absol_acu
fre_relat_acu
#grafico
lista=c(fre_absol_acu,fre_relat_acu)
for (i in lista){
barplot(i,i)
}
lista=c(fre_absol_acu,fre_relat_acu)
for (i in lista){
barplot(i,i)
}
help(rep)
jirafas=data.frame(zonas,longitud)
zonas=rep(c("A","B","C","D"), c(30,25,35,10))
jirafas=data.frame(zonas,longitud)
jirafas
str(jirafas)
apply(table(jirafas), MARGIN = 1, FUN = cumsum)
apply(table(jirafas), MARGIN = 2, FUN = cumsum)
apply(table(jirafas), MARGIN = 1, FUN = cumsum)
apply(table(jirafas), MARGIN = 2,
apply(table(jirafas), MARGIN = 1, FUN = cumsum)
apply(table(jirafas), MARGIN = 2, FUN = cumsum)
apply(table(jirafas), MARGIN = 1, FUN = cumsum)
apply(table(jirafas), MARGIN = 2, FUN = cumsum)
jirafas
str(jirafas)
apply(table(jirafas), MARGIN = 1, FUN = cumsum)
apply(table(jirafas), MARGIN = 2, FUN = cumsum)
apply(table(jirafas), MARGIN = 1, FUN = cumsum)
apply(table(jirafas), MARGIN = 2, FUN = cumsum)
fila_acumulada=apply(table(jirafas), MARGIN = 1, FUN = cumsum)#porfila
t(fila_acumulada)
edad=sample(1:40,20, replace = TRUE)
edad
p
edad=sample(10:40,20, replace = TRUE)
edad
table(edad)
table(nx)["54"]
set.seed(162017)
dados = sample(1:6,25,replace = TRUE)
dados
set.seed(NULL)
set.seed(162017)
dados = sample(1:6,25,replace = TRUE)
dados
set.seed(162017)
dados = sample(1:6,25,replace = TRUE)
dados
set.seed(16208)
dados = sample(1:6,25,replace = TRUE)
dados
table(dados)
fre_absol_dados=table(dados)
set.seed(NULL) #eliminamos el control de datos
fre_absol_dados=table(dados)
frec_rel_dados=prop.table(frec_rel_dados)
frec_rel_dados=prop.table(frec_absol_dados)
fre_absol_dados=table(dados)
frec_rel_dados=prop.table(frec_absol_dados)
frec_rel_dados=prop.table(fre_absol_dados)
frec_rel_dados
fre_absol_dados
frec_rel_dados
fre_absol_dados
frec_rel_dados
round(fre_absol_dados,1) #Pedimos solo un decimal
round(fre_absol_dados,2) #Pedimos solo un decimal
round(fre_absol_dados,2) #Pedimos solo un decimal
round(frec_rel_dados,1)
cumsum(fre_absol_dados) #acumulado
cumsum(frec_rel_dados) #acumulado relativo
# Creamos un dataframe para consolidar la informacion
dados.df=data.frame(Numero=1:6,
FA=as.vector(fre_absol_dados),
FR=as.vector(frec_rel_dados),
FAA=as.vector(cumsum(fre_absol_dados))
FRA=as.vector(cumsum(frec_rel_dados)))
# Creamos un dataframe para consolidar la informacion
dados.df=data.frame(Numero=1:6,
FA=as.vector(fre_absol_dados),
FR=as.vector(frec_rel_dados),
FAA=as.vector(cumsum(fre_absol_dados)),
FRA=as.vector(cumsum(frec_rel_dados)))
dados.df
str(dados.df)
View(dados.df)
barplot(dados.df)
$x_{(\frac{n+1}{2})}$
sort(edad) #Ordenamos de menor a mayor, usando FALSE podemos hacerlo decreciente
#Podemos calcular la media usando la formula
2*(edad[length(edad)/2]+edad[length(edad/2)+1])
#Podemos calcular la media usando la formula
edad[length(edad)/2]+edad[length(edad/2)+1]
#Podemos calcular la media usando la formula
edad[length(edad)/2]
#Podemos calcular la media usando la formula
edad[length(edad/2)]
set.seed(15)
edad=sample(10:40,20, replace = TRUE)
edad
table(edad)
set.seed(NULL)
edad=sample(10:40,20, replace = TRUE)
edad
set.seed(15)
edad=sample(10:40,20, replace = TRUE)
edad=sample(10:40,20, replace = TRUE)
edad=sample(10:40,20, replace = TRUE)
edad
edad=sample(10:40,20, replace = TRUE)
edad
set.seed(15)
edad=sample(10:40,20, replace = TRUE)
edad
set.seed(15)
edad=sample(10:40,20, replace = TRUE)
edad
set.seed(15)
edad=sample(10:40,20, replace = TRUE)
edad
set.seed(15)
edad=sample(10:40,20, replace = TRUE)
edad
set.seed(15)
edad=sample(10:40,20, replace = TRUE)
edad
edad=sample(10:40,20, replace = TRUE)
edad
set.seed(15)
edad=sample(10:40,20, replace = TRUE)
edad
set.seed(NULL)
set.seed(15)
edad=sample(10:40,20, replace = TRUE)
set.seed(15)
edad=sample(10:40,20, replace = TRUE)
edad
#Podemos calcular la media usando la formula
edad[length(edad/2)]
#Podemos calcular la media usando la formula
edad[length(edad)/2]
#Podemos calcular la media usando la formula
edad[length(edad)/2]
sort(edad) #Ordenamos de menor a mayor, usando FALSE podemos hacerlo decreciente
#Podemos calcular la media usando la formula
edad[length(edad)/2]
#Podemos calcular la media usando la formula
edad[length(edad)/2]+edad[length(edad)/2+1]
#Podemos calcular la media usando la formula
2*(edad[length(edad)/2]+edad[length(edad)/2+1])
#Podemos calcular la media usando la formula
(edad[length(edad)/2]+edad[length(edad)/2+1])/2
sort(edad) #Ordenamos de menor a mayor, usando FALSE podemos hacerlo decreciente
edad=sort(edad) #actualizamos el vector
#Podemos calcular la media usando la formula
(edad[length(edad)/2]+edad[length(edad)/2+1])/2
mediana_edad
#Podemos calcular la media usando la formula
mediana_edad=(edad[length(edad)/2]+edad[length(edad)/2+1])/2
mediana_edad
median(edad)
mean(edad) #Esta funcion nos da la media
media_edad=summary(edad)/length(edad)
media_edad
media_edad=sum(edad)/length(edad)
media_edad
media_edad=sum(edad)/length(edad)
media_edad
median(edad)#Esta es la funcion que nos da la mediana
as.numeric(names(which(table(edad)==max(table(edad)))))
#which nos devuelve las posiciones de los valores que cumplen la condicion
z=[1,2,2,4,2,5]
#which nos devuelve las posiciones de los valores que cumplen la condicion
z=c(1,2,2,4,2,5)
which(z==2)
as.numeric(names(which(table(edad)==max(table(edad)))))
as.numeric(names(which(table(edad)==max(table(edad)))))
table(edad)
max(table(edad))
names(max(table(edad)))
max(table(edad))
(which(table(edad)==max(table(edad)))
which(table(edad)==max(table(edad))
which(table(edad)==max(table(edad))
which(table(edad)==max(table(edad)))
x=c(15,14,18,19,24,12,16,13,18,20,16)
n= length(x)
#Media Aritmetica
media_aritmetica=sum(x)/n
media_aritmetica
round(media_aritmetica,2)
#Media Aritmetica ponderada
w=c(2,5,4,6,4,8,6,1,4,2,3)
length(w)
media_aritmetica_ponde=sum(x*w)/sum(w)
media_aritmetica_ponde
round(media_aritmetica,2)
media_aritmetica_ponde
#Media Aritmetica ponderada
w=c(8,5,4,6,4,8,6,1,4,2,3)
media_aritmetica_ponde=sum(x*w)/sum(w)
media_aritmetica_ponde
#Media Geometrica
media_geometrica=prod(x)^(1/n)
media_geometrica
#Media Armonica
media_armonica=n/sum(1/x)
media_armonica
set.seed(15)
dado=sample(1:4, 50, replace = TRUE)
set.seed(NULL)
dado=sort(dado)
dado
set.seed(15)
dado=sample(1:4, 50, replace = TRUE)
set.seed(NULL)
dado=sort(dado)
dado
set.seed(15)
dado=sample(1:4, 50, replace = TRUE)
set.seed(NULL)
set.seed(15)
dado=sample(1:4, 50, replace = TRUE)
set.seed(NULL)
dado
set.seed(15)
dado=sample(1:4, 50, replace = TRUE)
set.seed(NULL)
dado
set.seed(15)
dado=sample(1:4, 50, replace = TRUE)
set.seed(NULL)
dado=sort(dado)
dado
help(prop.table)
dado.df=data.frame(puntuacion=1:4,
Fre.Abs=as.vector(table(dado)),
Fre.Rel=as.vector(prop.table(table(dado))),
Fre.Abs.Acu=as.vector(cumsum(table(dado))),
Fre.Rel.Acu=as.vector(cumsum(prop.table(table(dado)))))
dado.df
#Si queremos saber donde cae el percentil 50 podemos calcularlo mediante
dado[0.5*length(dado)]
#Si queremos saber donde cae el percentil 50 podemos calcularlo mediante
dado[dado=0.5*length(dado)]
dados2
set.seed(20)
set.seed(20)
dados_a=sample(1:6,50, replace = TRUE)
dados2
dados2_a
dados_a
set.seed(20)
dados_a=sample(1:6,50, replace = TRUE)
dados_a
set.seed(20)
dados_a=sample(1:6,50, replace = TRUE)
dados_a
set.seed(NULL)
quantile(dados_a,0.25) # Es similar a manejar percentiles/100
sort(dados_a)
quantile(dados_a,0.80)
quantile(dados_a,0.55)
quantile(dados_a,0.45)
table(nx)["54"]
set.seed(20)
prueba=sample(1:10, 50, replace = FALSE)
prueba=sample(1:10, 50, replace = NULL)
set.seed(20)
prueba=sample(1:10, 50, replace = TRUE)
prueba
range(x)
set.seed(20)
prueba=sample(1:10, 50, replace = TRUE)
prueba
range(x) #Nos da el rango y podemos acceder al minimo y al maximo
range(prueba) #Nos da el rango y podemos acceder al minimo y al maximo
diff(range(prueba))
var(prueba) #Nos da la varianza poblacional
# Los valores poblacionales los podemos calcular usando las formulas
var_pob=var(prueba)*(length(prueba)-1)/length(prueba)
var_pob
sd_pob=sd(prueba)*(length(prueba)-1)/length(prueba)
sd_pob
cars=mtcars
summary(cars)
cars=cars[:,1:4]
cars=cars[1:,1:5]
cars=cars[,1:5]
cars
cars
summary(cars)
str(cars)
View(cars)
View(cars)
summary(cars)
View(cars)
View(cars)
subcars=subset(cars, cyl==4, c("disp","hp"))
subcars=subset(cars, cyl==4, c("disp","hp"))
subcars
summary(subcars)
