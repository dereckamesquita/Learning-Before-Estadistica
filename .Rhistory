```{r}
ggplot(data1, aes(x=P207, y=P524A1, color=DOMINIO)) +
geom_point() + theme_light()
ggplot(data1, aes(x=P301A, y=P524A1, color=DOMINIO)) +
geom_point() + theme_light()
ggplot(data1, aes(x=DOMINIO, y=P524A1, color=P301A)) +
geom_point() + theme_light()
mod <- lm(P524A1 ~ P301A + P207
, data=data1)
summary(mod)
ggplot(data1, aes(x=P301A, y=P524A1, color=P207)) +
geom_point() + theme_light()
ggplot(data1, aes(x=P207, y=P524A1, color=P301A)) +
geom_point() + theme_light()
View(data1)
data1$P301A[data1$P301A=="Básica especial"]=NA
data1 <- na.omit(data1)
ggplot(data1, aes(x=P207, y=P524A1, color=P301A)) +
geom_point() + theme_light()
data1<-read.csv(file ="E:/Github/Learning-Before-Estadistica/Enaho/Data_Enaho/export/data.csv", header=T )
data1$P301A[data1$P301A=="Básica especial"]=NA
data1 <- na.omit(data1)
View(data1)
# Dando niveles a las variables
```{r P207}
P207 <- c("Hombre","Mujer")
#Forma 1
for (a in (1:2)){
data1$P207[data1$P207==a]=P207[a]
}
data1$P207<- factor(data1$P207,levels =P207)
modelP207<- model.matrix(data1$P524A1~data1$P207+data1$P513T)
P300A <- c("Quechua","Aimara","Otra lengua nativa","Castellano",
"Portugués","Otra lengua extranjera","No escucha/no habla","Lengua de señas peruanas","Ashaninka","Awajún","Shipibo","Shawi","Matsigenka","Achuar")
#Forma 1
for (a in (1:15)){
data1$P300A[data1$P300A==a]=P300A[a]
}
table(data1$P300A)
data1$P300A<- factor(data1$P300A,levels =P300A)
modelP300A<- model.matrix(data1$P524A1~data1$P207+data1$P300A)
P301A <- c("Sin nivel","Educación inicial","Primaria incompleta","Primaria completa",
"Secundaria incompleta","Secundaria completa","Superior no universitaria Incompleta","Superior no universitaria completa","Superior universitaria completa","Maestria/Doctorado","Básica especial")
#Forma 1
for (a in (1:12)){
data1$P301A[data1$P301A==a]=P301A[a]
}
data1$P301A<- factor(data1$P301A,levels =P301A)
modelP301A<- model.matrix(data1$P524A1~data1$P301A+data1$P207)
#head(modelP301A[,-1])
data1$DOMINIO <- as.numeric(data1$DOMINIO)
str(data1$DOMINIO)
Dominios1 <- c("CostaNorte", "CostaCentro", "CostaSur","SierraNorte","SierraCentro","SierraSur","Selva", "LimaMetropolitana")
Dominios <- c("CN", "CC", "CS","SN","SC","SS","SE", "LM")
#Cambiamos numeros
for (a in (1:8)){
data1$DOMINIO[data1$DOMINIO==a]=Dominios[a]
}
data1$DOMINIO<- factor(data1$DOMINIO,levels =Dominios)
data1$P524A1=as.numeric(data1$P524A1)
ggplot(data1, aes(x=DOMINIO, y=P524A1, color=P301A)) +
geom_point() + theme_light()
max(data1$P524A1)
data1$P301A[data1$P301A=="Básica especial"]=NA
data1$P524A1=as.numeric(data1$P524A1)
ggplot(data1, aes(x=DOMINIO, y=P524A1, color=P301A)) +
geom_point() + theme_light()
max(data1$P524A1)
data1 <- na.omit(data1)
data1$P524A1=as.numeric(data1$P524A1)
ggplot(data1, aes(x=DOMINIO, y=P524A1, color=P301A)) +
geom_point() + theme_light()
max(data1$P524A1)
View(modelP301A)
data1<-read.csv(file ="E:/Github/Learning-Before-Estadistica/Enaho/Data_Enaho/export/data.csv", header=T )
P207 <- c("Hombre","Mujer")
#Forma 1
for (a in (1:2)){
data1$P207[data1$P207==a]=P207[a]
}
data1$P207<- factor(data1$P207,levels =P207)
modelP207<- model.matrix(data1$P524A1~data1$P207+data1$P513T)
P300A <- c("Quechua","Aimara","Otra lengua nativa","Castellano",
"Portugués","Otra lengua extranjera","No escucha/no habla","Lengua de señas peruanas","Ashaninka","Awajún","Shipibo","Shawi","Matsigenka","Achuar")
#Forma 1
for (a in (1:15)){
data1$P300A[data1$P300A==a]=P300A[a]
}
table(data1$P300A)
data1$P300A<- factor(data1$P300A,levels =P300A)
modelP300A<- model.matrix(data1$P524A1~data1$P207+data1$P300A)
P301A <- c("Sin nivel","Educación inicial","Primaria incompleta","Primaria completa",
"Secundaria incompleta","Secundaria completa","Superior no universitaria Incompleta","Superior no universitaria completa","Superior universitaria completa","Maestria/Doctorado","Básica especial")
#Forma 1
for (a in (1:12)){
data1$P301A[data1$P301A==a]=P301A[a]
}
#Limpieza de Educacion Basica
data1$P301A[data1$P301A=="Básica especial"]=NA
data1 <- na.omit(data1)
#Niveles
data1$P301A<- factor(data1$P301A,levels =P301A)
modelP301A<- model.matrix(data1$P524A1~data1$P301A+data1$P207)
#head(modelP301A[,-1])
#Cambiamos todos los 2 por el numero 0.
data1$P401H1[data1$P401H1==2]=0
data1$P401H2[data1$P401H2==2]=0
data1$P401H3[data1$P401H3==2]=0
data1$P401H4[data1$P401H4==2]=0
data1$P401H5[data1$P401H5==2]=0
data1$P401H6[data1$P401H6==2]=0
#Creamos una columna con el total de los que tienen limitaciones
data1$P401HT <- data1$P401H1+data1$P401H2+data1$P401H3+data1$P401H4+data1$P401H5+data1$P401H6
data1$P401HT <- data1$P401HT+1
#Categorizamos
P401HT <- c("Sano","Una_limitacion","Dos_limitacion","Tres_limitacion","Cuatro_limitacion")
#Forma 1
for (a in (1:5)){
data1$P401HT[data1$P401HT==a]=P401HT [a]
}
data1$P401HT <- factor(data1$P401HT ,levels =P401HT )
data1$P524A1=as.numeric(data1$P524A1)
ggplot(data1, aes(x=DOMINIO, y=P524A1, color=P301A)) +
geom_point() + theme_light()
library(dplyr)
library(readxl)
library(ggplot2)
data1$P524A1=as.numeric(data1$P524A1)
ggplot(data1, aes(x=DOMINIO, y=P524A1, color=P301A)) +
geom_point() + theme_light()
max(data1$P524A1)
data1$DOMINIO <- as.numeric(data1$DOMINIO)
str(data1$DOMINIO)
Dominios1 <- c("CostaNorte", "CostaCentro", "CostaSur","SierraNorte","SierraCentro","SierraSur","Selva", "LimaMetropolitana")
Dominios <- c("CN", "CC", "CS","SN","SC","SS","SE", "LM")
#Cambiamos numeros
for (a in (1:8)){
data1$DOMINIO[data1$DOMINIO==a]=Dominios[a]
}
data1$DOMINIO<- factor(data1$DOMINIO,levels =Dominios)
data1$P524A1=as.numeric(data1$P524A1)
ggplot(data1, aes(x=DOMINIO, y=P524A1, color=P301A)) +
geom_point() + theme_light()
datas<-c(dataCostaNorte,dataCostaCentro)
mod <- lm(P524A1 ~ P301A + P207
, data=data1)
summary(mod)
mod <- lm(P524A1 ~ DOMINIO)
mod <- lm(P524A1 ~ P301A + P207
, data=data1)
mod <- lm(P524A1 ~ DOMINIO+P207)
data1$P524A1=as.numeric(data1$P524A1)
ggplot(data1, aes(x=DOMINIO, y=P524A1, color=P301A)) +
geom_point() + theme_light()
mod1 <- lm(P524A1 ~ DOMINIO ,data=data1)
summary(mod1)
tablasalud <- table(data1$P401HT)
tablasalud_ <- prop.table(tablasalud)
barplot(tablasalud, xlab='Estrato socioeconómico',
ylab='Frecuencia relativa', las=1)
plot(data1$P401HT,data1$P524A1)
dataCostaNorte <- filter(data1, DOMINIO==1)
dataCostaCentro <- filter(data1, DOMINIO==2)
dataCostaSur <- filter(data1, DOMINIO==3)
dataSierraNorte <- filter(data1, DOMINIO==4)
dataSierraCentro <- filter(data1, DOMINIO==5)
dataSierraSur <- filter(data1, DOMINIO==6)
dataSelva <- filter(data1, DOMINIO==7)
dataLimaMetropolitana <- filter(data1, DOMINIO==8)
model_CN<-lm(P524A1 ~ P301A
, data=data1)
summary(model_CN)
View(model_CN)
model_CN<-lm(P524A1 ~ P301A, data=dataCostaNorte)
View(dataCostaNorte)
```{r Creacion de subdominios}
dataCostaNorte <- filter(data1, DOMINIO==1)
dataCostaCentro <- filter(data1, DOMINIO==2)
dataSierraNorte <- filter(data1, DOMINIO==4)
dataSierraCentro <- filter(data1, DOMINIO==5)
dataSierraSur <- filter(data1, DOMINIO==6)
dataSelva <- filter(data1, DOMINIO==7)
dataSelva <- filter(data1, DOMINIO==7)
dataLimaMetropolitana <- filter(data1, DOMINIO==8)
View(data1)
data1<-read.csv(file ="E:/Github/Learning-Before-Estadistica/Enaho/Data_Enaho/export/data.csv", header=T )
P207 <- c("Hombre","Mujer")
#Forma 1
for (a in (1:2)){
data1$P207[data1$P207==a]=P207[a]
}
data1$P207<- factor(data1$P207,levels =P207)
modelP207<- model.matrix(data1$P524A1~data1$P207+data1$P513T)
P300A <- c("Quechua","Aimara","Otra lengua nativa","Castellano",
"Portugués","Otra lengua extranjera","No escucha/no habla","Lengua de señas peruanas","Ashaninka","Awajún","Shipibo","Shawi","Matsigenka","Achuar")
#Forma 1
for (a in (1:15)){
data1$P300A[data1$P300A==a]=P300A[a]
}
data1$P300A<- factor(data1$P300A,levels =P300A)
modelP300A<- model.matrix(data1$P524A1~data1$P207+data1$P300A)
P301A <- c("Sin nivel","Educación inicial","Primaria incompleta","Primaria completa",
"Secundaria incompleta","Secundaria completa","Superior no universitaria Incompleta","Superior no universitaria completa","Superior universitaria completa","Maestria/Doctorado","Básica especial")
#Forma 1
for (a in (1:12)){
data1$P301A[data1$P301A==a]=P301A[a]
}
#Limpieza de Educacion Basica
data1$P301A[data1$P301A=="Básica especial"]=NA
data1 <- na.omit(data1)
#Niveles
data1$P301A<- factor(data1$P301A,levels =P301A)
modelP301A<- model.matrix(data1$P524A1~data1$P301A+data1$P207)
#head(modelP301A[,-1])
#Cambiamos todos los 2 por el numero 0.
data1$P401H1[data1$P401H1==2]=0
data1$P401H2[data1$P401H2==2]=0
data1$P401H3[data1$P401H3==2]=0
data1$P401H4[data1$P401H4==2]=0
data1$P401H5[data1$P401H5==2]=0
data1$P401H6[data1$P401H6==2]=0
#Creamos una columna con el total de los que tienen limitaciones
data1$P401HT <- data1$P401H1+data1$P401H2+data1$P401H3+data1$P401H4+data1$P401H5+data1$P401H6
data1$P401HT <- data1$P401HT+1
#Categorizamos
P401HT <- c("Sano","Una_limitacion","Dos_limitacion","Tres_limitacion","Cuatro_limitacion")
#Forma 1
for (a in (1:5)){
data1$P401HT[data1$P401HT==a]=P401HT [a]
}
data1$P401HT <- factor(data1$P401HT ,levels =P401HT )
data1$DOMINIO <- as.numeric(data1$DOMINIO)
str(data1$DOMINIO)
Dominios1 <- c("CostaNorte", "CostaCentro", "CostaSur","SierraNorte","SierraCentro","SierraSur","Selva", "LimaMetropolitana")
Dominios <- c("CN", "CC", "CS","SN","SC","SS","SE", "LM")
#Cambiamos numeros
for (a in (1:8)){
data1$DOMINIO[data1$DOMINIO==a]=Dominios[a]
}
data1$DOMINIO<- factor(data1$DOMINIO,levels =Dominios)
View(data1)
dataCostaNorte <- filter(data1, DOMINIO=="CN")
dataCostaCentro <- filter(data1, DOMINIO=="CC")
dataCostaSur <- filter(data1, DOMINIO=="CS")
dataSierraNorte <- filter(data1, DOMINIO=="SN")
dataSierraCentro <- filter(data1, DOMINIO=="SC")
dataSierraSur <- filter(data1, DOMINIO=="SS")
dataSelva <- filter(data1, DOMINIO=="SE")
dataLimaMetropolitana <- filter(data1, DOMINIO=="LM")
model_CN<-lm(P524A1 ~ P301A, data=dataCostaNorte)
model_CC<-lm(P524A1 ~ P301A, data=dataCostaCentro)
beta <- model_CN$coefficients[2]
beta
beta <- model_CN$coefficients[2:3]
beta
beta <- model_CN$coefficients[2:6]
beta
beta_CC <- model_CC$coefficients[2:6]
beta_CC
data.frame(beta_CN,beta_CC)
beta_CN <- model_CN$coefficients[2:6]
data.frame(beta_CN,beta_CC)
unidos<-data.frame(beta_CN,beta_CC)
plot(unidos)
unidos<-data.frame(beta_CN,beta_CC)
barplot(unidos)
View(unidos)
str(unidos)
barplot(unidos)
colnames(unidos)
beta_CN <- model_CN$coefficients[2:8]
beta_CC <- model_CC$coefficients[2:8]
model_CC<-lm(P524A1 ~ P301A, data=dataLimaMetropolitana)
model_CN<-lm(P524A1 ~ P301A, data=dataCostaNorte)
model_LM<-lm(P524A1 ~ P301A, data=dataLimaMetropolitana)
beta_CN <- model_CN$coefficients[2:8]
beta_CC <- model_CC$coefficients[2:8]
beta_LM <- model_LM$coefficients[2:8]
unidos<-data.frame(beta_CN,beta_CC,beta_LM)
model_CN<-lm(P524A1 ~ P301A, data=dataCostaNorte)
model_CC<-lm(P524A1 ~ P301A, data=dataCostaCentro)
model_LM<-lm(P524A1 ~ P301A, data=dataLimaMetropolitana)
beta_CN <- model_CN$coefficients[2:8]
beta_CN <- model_CN$coefficients[2:8]
beta_CC <- model_CC$coefficients[2:8]
beta_CN <- model_CN$coefficients[2:8]
beta_CC <- model_CC$coefficients[2:8]
beta_LM <- model_LM$coefficients[2:8]
beta_CC <- model_CC$coefficients[2:8]
beta_LM <- model_LM$coefficients[2:8]
unidos<-data.frame(beta_CN,beta_CC,beta_LM)
barplot(unidos)
table(unidos)
mod <- lm(P524A1 ~ P301A + P207
, data=data1)
summary(mod)
ggplot(data1, aes(x=P207, y=P524A1, color=P301A)) +
geom_point() + theme_light()
stargazer(mod)
library(stargazer)
install.packages("stargazer")
library(normtest)
install.packages("normtest")
install.packages("normtest")
library(stargazer)
library(normtest)
library(stargazer)
stargazer(mod)
jb.norm.test(mod)
mod <- lm(P524A1 ~ P301A + P207
, data=data1)
summary(mod)
summary(mod)
jb.norm.test(mod)
jb.norm.test(mod$residuals)
mod <- lm(P524A1 ~ P301A
, data=data1)
jb.norm.test(mod$residuals)
library(readxl)
library(dplyr)
library(ggplot2)
library(plotly)
library(DescTools)
library(GRS.test)
options(scipen=999)
install.packages(readxl,dplyr)
install.packages(readxl)
install.packages('readxl')
install.packages('dplyr','ggplot2')
#Libraries
install.packages('dplyr')
#Libraries
install.packages('ggplot2')
#Libraries
install.packages('plotly')
#Libraries
install.packages('DescTools')
#Libraries
install.packages('GRS.test')
library(readxl)
library(dplyr)
library(ggplot2)
library(plotly)
library(DescTools)
library(GRS.test)
options(scipen=999)
#Data
data<-read_xlsx("100_Portfolios.xlsx",sheet = "Data") %>% as.data.frame()
#Data
data<-read_xlsx("EAP/100_Portfolios.xlsx",sheet = "Data") %>% as.data.frame()
head(data)
#Portafolios
#Sample
n_begin <- 1
n_end <- 666
#portfolio
port_begin <- 1
port_end <- 99
portfolios <- data[n_begin:n_end,(port_begin+1):(port_end+1)]
View(portfolios)
#Fama-French (1993) factors:
Re_market <- data[n_begin:n_end,102]
SMB	<- data[n_begin:n_end,103]
SMB
HML	<- data[n_begin:n_end,104]
View(Re_market)
#Risk-free interest rate
RF <- data[n_begin:n_end,105]
n <- dim(portfolios)[2]
n
obs <- dim(portfolios)[1]
X <- data.frame(c=rep(1,obs),x=Re_market) %>% as.matrix()
X
Nvar <- dim(X)[2]
coef <- list()
yhat<- list()
n
#99 regressiones, para cada portafolio, para estimar los parametros via OLS
for( j in 1:n){
Y = portfolios[,j] - RF #Excess Return Portfolio j
coef[[j]] = solve(t(X)%*%X)%*%t(X)%*%Y  # alpha and beta ((X'X)-1 X'Y)
yhat[[j]] = X%*%(coef[[j]] %>% as.matrix())
}
mylist <- list(num=42, greeting="Hello, world")
mylist
View(mylist)
mylist[[2]]
mylist[[3]]
mylist[[3]]
mylist[[1]]
View(mylist)
mylist <- list(num=42, greeting="Hello, world", hola = c(2,3,4))
View(mylist)
mylist[[3]]
for( j in 1:n){
Y = portfolios[,j] - RF #Excess Return Portfolio j
coef[[j]] = solve(t(X)%*%X)%*%t(X)%*%Y  # alpha and beta ((X'X)-1 X'Y)
yhat[[j]] = X%*%(coef[[j]] %>% as.matrix())
}
yhatdf<- do.call("cbind",yhat) %>% as.data.frame
yhatdf
yhat
yhatdf
residuasl <- portfolios-yhatdf
residuasl
View(yhatdf)
# Unbiased estimator of variance of disturbances (in population model)
# variancia de paramatros estimados depende de variancia de residuos
s2 = list()
for( i in 1:n){
s2[[i]] = (t(residuasl[,i])%*%residuasl[,i])/(obs-Nvar)
}
s2=matrix(do.call("c",s2),nrow=1)
View(s2)
View(s2)
s2
# Variance of coef = [alpha beta]
variance_coef <- list()
for(k in 1:n){
# 1 calcular var cov de k1los coeficientes
var_c = s2[k]*solve(t(X)%*%X)
# 2 Extract the var(alpha) and var(beta)
varc1 = c(var_c[1,1],var_c[2,2])
# 3 Guardar el vector var(alpha) and var(beta)
variance_coef[[k]] = varc1 # %1st row is var(alpha), 2nd row is var(beta)
}
variance_coef<-do.call("cbind",variance_coef)
sd = variance_coef^(0.5)
sd
#alpha and beta
alpha = do.call("cbind",coef)[1,]
beta = do.call("cbind",coef)[2,]
# t-statistic
t_alpha = alpha/sd[1,] #al indicar . hacemos una operacion elemento a elemento
t_beta = beta/sd[2,]
#plots
par(mfrow=c(2,2))
plot(1:n,alpha,xlab = "portafolio", title = 'Estimated Alpha')
barplot(t_alpha,ylab="t_alpha")
plot(1:n,beta,xlab = "portafolio", title = 'Estimated Beta')
barplot(t_beta,ylab="t_beta")
# estimamos el retorno en exceso de cada portfolio
Exc_return = portfolios - do.call(cbind, replicate(99, RF, simplify=FALSE)) # Excess returns for every portfolio
# Does CAPM fit the Exp return?
# calculamos el retorno en exceso medio(promedio)
Exp_Exc_return = sapply(Exc_return,mean) #=E(Re): mean for every exc return port
Exp_Exc_market_return = mean(Re_market)  #=E[Rem]
# Does CAPM fit the Exp return? PLOT: E(Re)vs beta*E[Rem]
# data observada vs modelo
Estimate_Exp_Exc_return = beta*Exp_Exc_market_return #=beta*E[Rem]
#-- Exp Exc Return: Data vs Estimation: E(Re) = beta*E[Rem]
# scatter(beta*E[Rem],E(Re))
plot(Estimate_Exp_Exc_return,Exp_Exc_return)
abline(coef = c(0,1))
par(mfrow=c(2,2))
plot(1:n,alpha,xlab = "portafolio", title = 'Estimated Alpha')
barplot(t_alpha,ylab="t_alpha")
plot(1:n,beta,xlab = "portafolio", title = 'Estimated Beta')
barplot(t_beta,ylab="t_beta")
#-- Exp Exc Return: Data vs Estimation: E(Re) = beta*E[Rem]
# scatter(beta*E[Rem],E(Re))
plot(Estimate_Exp_Exc_return,Exp_Exc_return)
abline(coef = c(0,1))
#-- Exp Exc Return: Data vs Estimation: E(Re) = beta*E[Rem]
# scatter(beta*E[Rem],E(Re))
plot(Estimate_Exp_Exc_return,Exp_Exc_return)
abline(coef = c(0,1))
#-- BETA vs Exp Return
plot(beta,Exp_Exc_return)
## Hypothesis Testing (Individually: alpha)
# Ho: B3 = 0, Ha: B3 <> 0
alpha_h0 = 0    # my hypothesis.
df = obs - Nvar # degree of freedom (obs disponibles para realizar las estimaciones)
sig = 0.05      # significant level
t_critic = qt(1-sig,df)
#alpha
p_value_alpha = 2*(1 - pnorm(abs(t_alpha),lower.tail = T));
#observar cuantos alphas tuvieron alpha <5% y son diferentes de 0
plot(alpha,100.*p_value_alpha)
#beta
p_value_beta = 2*(1 - pnorm(abs(t_beta),lower.tail = T));
# if p_value<5% then alpha is different to 0
plot(beta,100.*p_value_beta)
plot(beta,rep(5,n))
# GRS test
# H0: all the alphas are zero
ret.mat <- data[n_begin:n_end,(port_begin+1):(port_end-2)]
factor.mat <- data[n_begin:n_end,102]
head(ret.mat)
head(factor.mat)
GRS.test(ret.mat,factor.mat)$GRS.stat
GRS.test(ret.mat,factor.mat)$GRS.pval
factor.matff <- data[n_begin:n_end,102:104]
GRS.test(ret.mat,factor.matff)$GRS.stat
GRS.test(ret.mat,factor.matff)$GRS.pval
a <- 0.5454544545454545442332
q
a
a <- 653634636356344456
a
options(scipen=0)
a
getOption("scipen")
library(readxl)
library(dplyr)
library(ggplot2)
library(plotly)
library(DescTools)
library(GRS.test)
options(scipen=999)
install.packages("tinytex")
tinytex::install_tinytex()
